From cccc0a6293b1ae03556b01748964a159d7f56907 Mon Sep 17 00:00:00 2001
From: Evan Callaway <evan.callaway@ipconfigure.com>
Date: Thu, 22 Oct 2015 11:18:22 -0400
Subject: [PATCH] Retry connection if tunneling needs authentication

Leverage response from gst_rtsp_connection_connect_with_response to
determine if the connection should be retried using authentication.  If
so, add the appropriate authentication headers based upon the response
and retry the connection.
---
 gst/rtsp/gstrtspsrc.c | 158 +++++++++++++++++++++++++++++---------------------
 1 file changed, 93 insertions(+), 65 deletions(-)

diff --git a/gst/rtsp/gstrtspsrc.c b/gst/rtsp/gstrtspsrc.c
index 88464e9..9907df6 100644
--- a/gst/rtsp/gstrtspsrc.c
+++ b/gst/rtsp/gstrtspsrc.c
@@ -4493,73 +4493,117 @@ gst_rtspsrc_push_event (GstRTSPSrc * src, GstEvent * event)
 }
 
 static GstRTSPResult
+gst_rtsp_conninfo_close (GstRTSPSrc * src, GstRTSPConnInfo * info,
+    gboolean free)
+{
+  GST_RTSP_STATE_LOCK (src);
+  if (info->connected) {
+    GST_DEBUG_OBJECT (src, "closing connection...");
+    gst_rtsp_connection_close (info->connection);
+    info->connected = FALSE;
+  }
+  if (free && info->connection) {
+    /* free connection */
+    GST_DEBUG_OBJECT (src, "freeing connection...");
+    gst_rtsp_connection_free (info->connection);
+    info->connection = NULL;
+  }
+  GST_RTSP_STATE_UNLOCK (src);
+  return GST_RTSP_OK;
+}
+
+static GstRTSPResult
 gst_rtsp_conninfo_connect (GstRTSPSrc * src, GstRTSPConnInfo * info,
     gboolean async)
 {
   GstRTSPResult res;
+  GstRTSPMessage *response = NULL;
+  guint8 retry = 0;
 
-  if (info->connection == NULL) {
-    if (info->url == NULL) {
-      GST_DEBUG_OBJECT (src, "parsing uri (%s)...", info->location);
-      if ((res = gst_rtsp_url_parse (info->location, &info->url)) < 0)
-        goto parse_error;
-    }
+  response = g_new0 (GstRTSPMessage, 1);
+  gst_rtsp_message_init (response);
 
-    /* create connection */
-    GST_DEBUG_OBJECT (src, "creating connection (%s)...", info->location);
-    if ((res = gst_rtsp_connection_create (info->url, &info->connection)) < 0)
-      goto could_not_create;
+  do {
+    if (info->connection == NULL) {
+      if (info->url == NULL) {
+        GST_DEBUG_OBJECT (src, "parsing uri (%s)...", info->location);
+        if ((res = gst_rtsp_url_parse (info->location, &info->url)) < 0)
+          goto parse_error;
+      }
+      /* create connection */
+      GST_DEBUG_OBJECT (src, "creating connection (%s)...", info->location);
+      if ((res = gst_rtsp_connection_create (info->url, &info->connection)) < 0)
+        goto could_not_create;
 
-    if (info->url_str)
-      g_free (info->url_str);
-    info->url_str = gst_rtsp_url_get_request_uri (info->url);
+      if (retry) {
+        gst_rtspsrc_setup_auth (src, response);
+      }
 
-    GST_DEBUG_OBJECT (src, "sanitized uri %s", info->url_str);
+      if (info->url_str)
+        g_free (info->url_str);
+      info->url_str = gst_rtsp_url_get_request_uri (info->url);
 
-    if (info->url->transports & GST_RTSP_LOWER_TRANS_TLS) {
-      if (!gst_rtsp_connection_set_tls_validation_flags (info->connection,
-              src->tls_validation_flags))
-        GST_WARNING_OBJECT (src, "Unable to set TLS validation flags");
+      GST_DEBUG_OBJECT (src, "sanitized uri %s", info->url_str);
 
-      if (src->tls_database)
-        gst_rtsp_connection_set_tls_database (info->connection,
-            src->tls_database);
+      if (info->url->transports & GST_RTSP_LOWER_TRANS_TLS) {
+        if (!gst_rtsp_connection_set_tls_validation_flags (info->connection,
+                src->tls_validation_flags))
+          GST_WARNING_OBJECT (src, "Unable to set TLS validation flags");
 
-      if (src->tls_interaction)
-        gst_rtsp_connection_set_tls_interaction (info->connection,
-            src->tls_interaction);
-    }
+        if (src->tls_database)
+          gst_rtsp_connection_set_tls_database (info->connection,
+              src->tls_database);
+
+        if (src->tls_interaction)
+          gst_rtsp_connection_set_tls_interaction (info->connection,
+              src->tls_interaction);
+      }
 
-    if (info->url->transports & GST_RTSP_LOWER_TRANS_HTTP)
-      gst_rtsp_connection_set_tunneled (info->connection, TRUE);
+      if (info->url->transports & GST_RTSP_LOWER_TRANS_HTTP)
+        gst_rtsp_connection_set_tunneled (info->connection, TRUE);
 
-    if (src->proxy_host) {
-      GST_DEBUG_OBJECT (src, "setting proxy %s:%d", src->proxy_host,
-          src->proxy_port);
-      gst_rtsp_connection_set_proxy (info->connection, src->proxy_host,
-          src->proxy_port);
+      if (src->proxy_host) {
+        GST_DEBUG_OBJECT (src, "setting proxy %s:%d", src->proxy_host,
+            src->proxy_port);
+        gst_rtsp_connection_set_proxy (info->connection, src->proxy_host,
+            src->proxy_port);
+      }
     }
-  }
 
-  if (!info->connected) {
-    /* connect */
-    if (async)
-      GST_ELEMENT_PROGRESS (src, CONTINUE, "connect",
-          ("Connecting to %s", info->location));
-    GST_DEBUG_OBJECT (src, "connecting (%s)...", info->location);
-    if ((res =
-            gst_rtsp_connection_connect (info->connection,
-                src->ptcp_timeout)) < 0)
-      goto could_not_connect;
+    if (!info->connected) {
+      /* connect */
+      if (async)
+        GST_ELEMENT_PROGRESS (src, CONTINUE, "connect",
+            ("Connecting to %s", info->location));
+      GST_DEBUG_OBJECT (src, "connecting (%s)...", info->location);
+      res = gst_rtsp_connection_connect_with_response (info->connection,
+          src->ptcp_timeout, response);
+
+      if (response->type == GST_RTSP_MESSAGE_HTTP_RESPONSE &&
+          response->type_data.response.code == GST_RTSP_STS_UNAUTHORIZED) {
+        gst_rtsp_conninfo_close (src, info, TRUE);
+        retry++;
+      } else {
+        retry = 0;
+      }
 
-    info->connected = TRUE;
-  }
+      if (res == GST_RTSP_OK)
+        info->connected = TRUE;
+      else if (!retry || retry > 1)
+        goto could_not_connect;
+    }
+  } while (!info->connected && retry);
+
+  gst_rtsp_message_unset (response);
+  g_free (response);
   return GST_RTSP_OK;
 
   /* ERRORS */
 parse_error:
   {
     GST_ERROR_OBJECT (src, "No valid RTSP URL was provided");
+    gst_rtsp_message_unset (response);
+    g_free (response);
     return res;
   }
 could_not_create:
@@ -4567,6 +4611,8 @@ could_not_create:
     gchar *str = gst_rtsp_strresult (res);
     GST_ERROR_OBJECT (src, "Could not create connection. (%s)", str);
     g_free (str);
+    gst_rtsp_message_unset (response);
+    g_free (response);
     return res;
   }
 could_not_connect:
@@ -4574,31 +4620,13 @@ could_not_connect:
     gchar *str = gst_rtsp_strresult (res);
     GST_ERROR_OBJECT (src, "Could not connect to server. (%s)", str);
     g_free (str);
+    gst_rtsp_message_unset (response);
+    g_free (response);
     return res;
   }
 }
 
 static GstRTSPResult
-gst_rtsp_conninfo_close (GstRTSPSrc * src, GstRTSPConnInfo * info,
-    gboolean free)
-{
-  GST_RTSP_STATE_LOCK (src);
-  if (info->connected) {
-    GST_DEBUG_OBJECT (src, "closing connection...");
-    gst_rtsp_connection_close (info->connection);
-    info->connected = FALSE;
-  }
-  if (free && info->connection) {
-    /* free connection */
-    GST_DEBUG_OBJECT (src, "freeing connection...");
-    gst_rtsp_connection_free (info->connection);
-    info->connection = NULL;
-  }
-  GST_RTSP_STATE_UNLOCK (src);
-  return GST_RTSP_OK;
-}
-
-static GstRTSPResult
 gst_rtsp_conninfo_reconnect (GstRTSPSrc * src, GstRTSPConnInfo * info,
     gboolean async)
 {
-- 
1.9.1

