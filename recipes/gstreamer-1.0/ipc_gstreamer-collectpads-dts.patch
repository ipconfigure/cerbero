From b99f8b083d441d0c431feb717e46c288db503b2c Mon Sep 17 00:00:00 2001
From: Jake Foytik <jake.foytik@ipconfigure.com>
Date: Wed, 2 Dec 2015 13:48:44 -0500
Subject: [PATCH] Fix issue that would produce incorrect DTS values.

If a buffer contained an invalid PTS but a valid DTS, the gst_collect_pads_clip_running time function would pass the buffer
without converting the DTS timestamp to running time. This could cause muxers to hang when using pad offsets.
---
 libs/gst/base/gstcollectpads.c | 61 +++++++++++++++++++++++-------------------
 1 file changed, 33 insertions(+), 28 deletions(-)

diff --git a/libs/gst/base/gstcollectpads.c b/libs/gst/base/gstcollectpads.c
index 30c565f..3ecc206 100644
--- a/libs/gst/base/gstcollectpads.c
+++ b/libs/gst/base/gstcollectpads.c
@@ -510,7 +510,11 @@ gst_collect_pads_clip_running_time (GstCollectPads * pads,
   *outbuf = buf;
   time = GST_BUFFER_PTS (buf);
 
-  /* invalid left alone and passed */
+  /* If both PTS and DTS are invalid, leave alone and pass */
+  if (!GST_CLOCK_TIME_IS_VALID(time) && !GST_CLOCK_TIME_IS_VALID(GST_BUFFER_DTS(buf)))
+    return GST_FLOW_OK;
+
+  /* If PTS is valid, convert to running time and clip if neccessary. */
   if (G_LIKELY (GST_CLOCK_TIME_IS_VALID (time))) {
     time = gst_segment_to_running_time (&cdata->segment, GST_FORMAT_TIME, time);
     if (G_UNLIKELY (!GST_CLOCK_TIME_IS_VALID (time))) {
@@ -518,36 +522,37 @@ gst_collect_pads_clip_running_time (GstCollectPads * pads,
           GST_TIME_FORMAT, GST_TIME_ARGS (GST_BUFFER_PTS (buf)));
       gst_buffer_unref (buf);
       *outbuf = NULL;
-    } else {
-      GstClockTime buf_dts, abs_dts;
-      gint dts_sign;
-
-      GST_LOG_OBJECT (cdata->pad, "buffer pts %" GST_TIME_FORMAT " -> %"
-          GST_TIME_FORMAT " running time",
-          GST_TIME_ARGS (GST_BUFFER_PTS (buf)), GST_TIME_ARGS (time));
-      *outbuf = gst_buffer_make_writable (buf);
-      GST_BUFFER_PTS (*outbuf) = time;
-
-      dts_sign = gst_segment_to_running_time_full (&cdata->segment,
-          GST_FORMAT_TIME, GST_BUFFER_DTS (*outbuf), &abs_dts);
-      buf_dts = GST_BUFFER_DTS (*outbuf);
-      if (dts_sign > 0) {
-        GST_BUFFER_DTS (*outbuf) = abs_dts;
-        GST_COLLECT_PADS_DTS (cdata) = abs_dts;
-      } else if (dts_sign < 0) {
-        GST_BUFFER_DTS (*outbuf) = GST_CLOCK_TIME_NONE;
-        GST_COLLECT_PADS_DTS (cdata) = -((gint64) abs_dts);
-      } else {
-        GST_BUFFER_DTS (*outbuf) = GST_CLOCK_TIME_NONE;
-        GST_COLLECT_PADS_DTS (cdata) = GST_CLOCK_STIME_NONE;
-      }
-
-      GST_LOG_OBJECT (cdata->pad, "buffer dts %" GST_TIME_FORMAT " -> %"
-          GST_STIME_FORMAT " running time", GST_TIME_ARGS (buf_dts),
-          GST_STIME_ARGS (GST_COLLECT_PADS_DTS (cdata)));
+      return GST_FLOW_OK;
     }
   }
 
+  GstClockTime buf_dts, abs_dts;
+  gint dts_sign;
+
+  GST_LOG_OBJECT (cdata->pad, "buffer pts %" GST_TIME_FORMAT " -> %"
+      GST_TIME_FORMAT " running time",
+      GST_TIME_ARGS (GST_BUFFER_PTS (buf)), GST_TIME_ARGS (time));
+  *outbuf = gst_buffer_make_writable (buf);
+  GST_BUFFER_PTS (*outbuf) = time;
+
+  dts_sign = gst_segment_to_running_time_full (&cdata->segment,
+      GST_FORMAT_TIME, GST_BUFFER_DTS (*outbuf), &abs_dts);
+  buf_dts = GST_BUFFER_DTS (*outbuf);
+  if (dts_sign > 0) {
+    GST_BUFFER_DTS (*outbuf) = abs_dts;
+    GST_COLLECT_PADS_DTS (cdata) = abs_dts;
+  } else if (dts_sign < 0) {
+    GST_BUFFER_DTS (*outbuf) = GST_CLOCK_TIME_NONE;
+    GST_COLLECT_PADS_DTS (cdata) = -((gint64) abs_dts);
+  } else {
+    GST_BUFFER_DTS (*outbuf) = GST_CLOCK_TIME_NONE;
+    GST_COLLECT_PADS_DTS (cdata) = GST_CLOCK_STIME_NONE;
+  }
+
+  GST_LOG_OBJECT (cdata->pad, "buffer dts %" GST_TIME_FORMAT " -> %"
+      GST_STIME_FORMAT " running time", GST_TIME_ARGS (buf_dts),
+      GST_STIME_ARGS (GST_COLLECT_PADS_DTS (cdata)));
+
   return GST_FLOW_OK;
 }
 
-- 
1.9.1

