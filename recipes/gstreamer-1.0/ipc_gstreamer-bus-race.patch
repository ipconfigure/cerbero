From 330bfd103f071aba4c824017589eef7abb11d8e9 Mon Sep 17 00:00:00 2001
From: Jan Schmidt <jan@centricular.com>
Date: Sat, 6 Jun 2015 22:11:05 +1000
Subject: [PATCH] gstbus: Fix races posting and popping messages.

Wrap message posting and writing to the GstPoll control socket
in the bus mutex so the operation can't race against a client
attempting to pop a message.

https://bugzilla.gnome.org/show_bug.cgi?id=750397
---
 gst/gstbus.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/gst/gstbus.c b/gst/gstbus.c
index fbe2464..fae88cd 100644
--- a/gst/gstbus.c
+++ b/gst/gstbus.c
@@ -346,8 +346,10 @@ gst_bus_post (GstBus * bus, GstMessage * message)
     case GST_BUS_PASS:
       /* pass the message to the async queue, refcount passed in the queue */
       GST_DEBUG_OBJECT (bus, "[msg %p] pushing on async queue", message);
+      g_mutex_lock (&bus->priv->queue_lock);
       gst_atomic_queue_push (bus->priv->queue, message);
       gst_poll_write_control (bus->priv->poll);
+      g_mutex_unlock (&bus->priv->queue_lock);
       GST_DEBUG_OBJECT (bus, "[msg %p] pushed on async queue", message);
 
       break;
@@ -370,8 +372,10 @@ gst_bus_post (GstBus * bus, GstMessage * message)
        * the cond will be signalled and we can continue */
       g_mutex_lock (lock);
 
+      g_mutex_lock (&bus->priv->queue_lock);
       gst_atomic_queue_push (bus->priv->queue, message);
       gst_poll_write_control (bus->priv->poll);
+      g_mutex_unlock (&bus->priv->queue_lock);
 
       /* now block till the message is freed */
       g_cond_wait (cond, lock);
-- 
2.4.2