From df6035a782b101d6610f599ef883d0caf740d532 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Aleix=20Conchillo=20Flaqu=C3=A9?= <aconchillo@gmail.com>
Date: Thu, 14 Apr 2016 22:56:11 -0700
Subject: [PATCH] sdp: add rollover counters for all sender SSRC

We add different crypto sessions in MIKEY, one for each sender
SSRC. Currently, all of them will have the same security policy, 0.

The rollover counters are obtained from the srtpenc element using the
"stats" property.

https://bugzilla.gnome.org/show_bug.cgi?id=730539
---
 gst/rtsp-server/rtsp-sdp.c    | 96 +++++++++++++++++++++++++++++++++++++++++--
 gst/rtsp-server/rtsp-stream.c | 26 ++++++++++++
 gst/rtsp-server/rtsp-stream.h |  2 +
 3 files changed, 120 insertions(+), 4 deletions(-)

diff --git a/gst/rtsp-server/rtsp-sdp.c b/gst/rtsp-server/rtsp-sdp.c
index 950a1eb..6067e41 100644
--- a/gst/rtsp-server/rtsp-sdp.c
+++ b/gst/rtsp-server/rtsp-sdp.c
@@ -16,6 +16,9 @@
  * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */
+
+#define GLIB_DISABLE_DEPRECATION_WARNINGS
+
 /**
  * SECTION:rtsp-sdp
  * @short_description: Make SDP messages
@@ -72,6 +75,93 @@ update_sdp_from_tags (GstRTSPStream * stream, GstSDPMedia * stream_media)
   gst_object_unref (src_pad);
 }
 
+static guint
+get_roc_from_stats (GstStructure * stats, guint ssrc)
+{
+  guint roc = 0;
+
+  if (!gst_structure_has_field_typed (stats, "streams", G_TYPE_ARRAY)) {
+    GST_WARNING ("stats doesn't have a 'streams' field");
+  } else {
+    const GValue *value;
+    GArray *streams;
+    guint i;
+
+    value = gst_structure_get_value (stats, "streams");
+
+    streams = g_value_get_boxed (value);
+
+    // Look if there's any SSRC that matches.
+    for (i = 0; i < streams->len; i++) {
+      guint stream_ssrc;
+      GstStructure *stream;
+      GValue value = G_VALUE_INIT;
+
+      value = g_array_index (streams, GValue, i);
+      stream = g_value_get_boxed (&value);
+
+      gst_structure_get_uint (stream, "ssrc", &stream_ssrc);
+
+      if (stream_ssrc == ssrc) {
+        gst_structure_get_uint (stream, "roc", &roc);
+        break;
+      }
+    }
+  }
+
+  return roc;
+}
+
+static void
+mikey_add_crypto_sessions (GstRTSPStream * stream, GstMIKEYMessage * msg)
+{
+  guint i;
+  GObject *session;
+  GstElement *encoder;
+  GValueArray *sources;
+
+  session = gst_rtsp_stream_get_rtpsession (stream);
+  if (session == NULL)
+    return;
+
+  encoder = gst_rtsp_stream_get_srtp_encoder (stream);
+  if (encoder == NULL) {
+    g_object_unref (session);
+    return;
+  }
+
+  g_object_get (session, "sources", &sources, NULL);
+  for (i = 0; i < sources->n_values; i++) {
+    GValue *val;
+    GObject *source;
+    guint32 ssrc;
+    gboolean is_sender;
+
+    val = g_value_array_get_nth (sources, i);
+    source = (GObject *) g_value_get_object (val);
+
+    g_object_get (source, "ssrc", &ssrc, "is-sender", &is_sender, NULL);
+
+    if (is_sender) {
+      guint32 roc = 0;
+      GstStructure *stats;
+
+      g_object_get (encoder, "stats", &stats, NULL);
+
+      if (stats) {
+        roc = get_roc_from_stats (stats, ssrc);
+        gst_structure_free (stats);
+      }
+
+      gst_mikey_message_add_cs_srtp (msg, 0, ssrc, roc);
+    }
+  }
+  g_value_array_free (sources);
+
+  gst_object_unref (encoder);
+  g_object_unref (session);
+}
+
 static void
 make_media (GstSDPMessage * sdp, GstSDPInfo * info,
     GstRTSPStream * stream, GstCaps * caps, GstRTSPProfile profile)
@@ -85,7 +175,6 @@ make_media (GstSDPMessage * sdp, GstSDPInfo * info,
   guint ttl;
   GstClockTime rtx_time;
   gchar *base64;
-  guint32 ssrc;
   GstMIKEYMessage *mikey_msg;
 
   gst_sdp_media_new (&smedia);
@@ -154,9 +243,8 @@ make_media (GstSDPMessage * sdp, GstSDPInfo * info,
   /* check for srtp */
   mikey_msg = gst_mikey_message_new_from_caps (caps);
   if (mikey_msg) {
-    gst_rtsp_stream_get_ssrc (stream, &ssrc);
-    /* add policy '0' for our SSRC */
-    gst_mikey_message_add_cs_srtp (mikey_msg, 0, ssrc, 0);
+    /* add policy '0' for all sending SSRC */
+    mikey_add_crypto_sessions (stream, mikey_msg);
 
     base64 = gst_mikey_message_base64_encode (mikey_msg);
     if (base64) {
diff --git a/gst/rtsp-server/rtsp-stream.c b/gst/rtsp-server/rtsp-stream.c
index faa76fe..b861c53 100644
--- a/gst/rtsp-server/rtsp-stream.c
+++ b/gst/rtsp-server/rtsp-stream.c
@@ -1574,6 +1574,32 @@ gst_rtsp_stream_get_rtpsession (GstRTSPStream * stream)
 }
 
 /**
+ * gst_rtsp_stream_get_encoder:
+ * @stream: a #GstRTSPStream
+ *
+ * Get the SRTP encoder for this stream.
+ *
+ * Returns: (transfer full): The SRTP encoder for this stream. Unref after usage.
+ */
+GstElement *
+gst_rtsp_stream_get_srtp_encoder (GstRTSPStream * stream)
+{
+  GstRTSPStreamPrivate *priv;
+  GstElement *encoder;
+
+  g_return_val_if_fail (GST_IS_RTSP_STREAM (stream), NULL);
+
+  priv = stream->priv;
+
+  g_mutex_lock (&priv->lock);
+  if ((encoder = priv->srtpenc))
+    g_object_ref (encoder);
+  g_mutex_unlock (&priv->lock);
+
+  return encoder;
+}
+
+/**
  * gst_rtsp_stream_get_ssrc:
  * @stream: a #GstRTSPStream
  * @ssrc: (out): result ssrc
diff --git a/gst/rtsp-server/rtsp-stream.h b/gst/rtsp-server/rtsp-stream.h
index 46304ac..de2ddbd 100644
--- a/gst/rtsp-server/rtsp-stream.h
+++ b/gst/rtsp-server/rtsp-stream.h
@@ -124,6 +124,8 @@ GstRTSPAddress *  gst_rtsp_stream_get_multicast_address (GstRTSPStream *stream,
 
 GObject *         gst_rtsp_stream_get_rtpsession   (GstRTSPStream *stream);
 
+GstElement *      gst_rtsp_stream_get_srtp_encoder (GstRTSPStream *stream);
+
 void              gst_rtsp_stream_get_ssrc         (GstRTSPStream *stream,
                                                     guint *ssrc);
 
-- 
2.8.1
